["-11","5","+","-10","+","4","10","+","-","35","-","23","+","-17","-9","-","24","-20","-","-","38","-20","1","-","+","-","+","-7","-","-13","+","-19","+","-12","-","-15","35","-","+","16","+","-15","-17","+","+","3","+","-9","-","16","6","38","-","22","1","/","+","-","-","33","-","33","32","+","-","20","-","13","+","38","23","-20","25","+","+","-","21","23","-","+","+","10","-7","-","1","-10","37","+","+","+","-","-20","-","-20","-","1","34","18","-","+","-","2","+","7","+","37","+","-13","-","5","-","32","*","34","+","26","12","+","-","1","28","-14","-","+","24","18","-16","+","-","+","+","19","-","38","-","-1","20","34","16","38","11","22","-","-","-6","+","+","-","-","+","34","18","-","/","-","14","24","-","-","-6","+","10","+","30","-","16","-","25","+","-10","-","39","+","-19","+","21","32","-","-5","-","-11","/","12","-","+","-1","-17","+","+","-2","-","37","-","-8","*","15","+","-1","-","-8","4","36","+","-","+","17","15","14","+","34","9","-","-","+","-","38","-","-20","38","-15","+","+","-","37","+","-17","-13","+","-","-18","36","-","-","27","*","4","-","12","-15","16","+","-","+","34","35","28","3","+","-","+","-","4","+","29","*","9","-14","+","-","-3","8","-","20","22","-","+","-","28","9","-","+","6","+","8","+","3","-","20","17","-","34","10","-16","-","37","28","31","-","+","+","4","33","23","36","-","7","8","-","14","16","-","-","6","-","+","+","+","-","+","+","+","33","11","-18","-","-17","15","-","-","27","+","32","-","+","+","32","-","32","-20","-","+","24","+","15","+","36","-","4","-16","-2","29","+","-","/","-16","17","-","-18","-","-1","+","+","28","-","+","-9","+","19","+","-20","+","-4","1","+","-15","-6","+","14","-1","+","-12","*","+","*","-3","-","+","3","-","39","-","-18","37","*","+","-4","+","-19","+","10","+","-20","-","25","1","+","+","17","-","3","32","-","-7","+","-","16","-","-6","19","+","+","17","-","14","+","-5","-","10","-","0","+","20","14","+","-","14","-","30","+","6","20","-","+","4","+","18","+","37","28","+","+","14","+","12","+","20","8","36","22","37","-","+","-","26","-12","-","-","20","-","+","-","11","-9","26","3","-","+","38","26","-15","-","-","6","+","+","-","+","19","-","4","20","-6","-","+","20","5","28","-","/","-","-8","+","-13","-5","2","14","/","36","-","+","25","+","/","-","+","23","21","-17","+","+","-","0","-","-13","-","-18","+","28","-","-17","-","37","+","-5","-","-8","+","13","20","-","-","3","+","-3","-19","-","-","2","+","28","-19","-","-","17","+","32","-","10","-8","-","12","-2","+","-","+","33","-","32","-","32","+","35","17","+","+","19","-","-19","-","-6","-","-9","35","*","-","25","13","-","+","-13","-3","-19","*","+","10","24","-5","28","30","23","-","*","24","13","-","7","-","10","+","10","+","5","+","-","-","30","/","-9","-","-2","-","-","8","/","+","-","-","33","33","29","-15","+","-","-","-2","-","10","+","17","-14","-14","+","10","+","23","-","5","+","-","39","23","-1","+","-","23","+","37","23","-","5","+","-","+","+","35","7","-9","+","-","19","-4","+","+","*","+","22","+","33","34","-","22","-","+","-1","+","23","-","7","19","+","-","-16","2","36","-","20","-","-3","-","+","-","-4","37","+","-","11","/","29","-7","-","+","-18","+","36","-","13","+","17","-14","14","+","-","-","30","-","-8","-","-4","+","-10","+","17","+","-17","5","+","+","21","+","29","*","14","+","27","-","-10","+","11","-","20","/","13","29","-10","17","-","-","4","37","+","-","+","+","11","16","-2","-","9","+","-","-","-5","+","28","-","5","10","+","27","-","+","-11","+","7","-","33","-","11","-","-17","-","-5","-10","+","-","16","-","1","-","13","+","14","-","4","-","33","-","3","+","-5","-","-4","+","-15","-","5","-","39","+","-15","-","12","-","25","32","22","+","15","33","-","16","+","-","-","+","6","+","29","28","+","-","12","-","2","29","23","-","-11","-","-","+","8","32","-1","+","+","+","28","+","19","-","6","-15","-","11","-","+","-7","18","+","-11","1","+","-5","-","+","8","+","-","18","-","-16","+","-1","+","-9","+","-9","22","12","-","+","-","4","-","-19","+","28","-","-2","-","-20","17","-","-9","-","+","39","+","0","+","-8","-"]

迭代版代码：使用一个stack，如果遇到的string是"+,-,*,/"则依次取出栈顶的两个元素a,b("pop掉a后b才是新的栈顶")，将 b oper a 压入栈作为新的栈顶；如果遇到的string为数字则转为"int!!!"再压入栈中。
"遇到的坑"：从题目的示例可以看出每次的 (a op b)都是强转为int后再压入栈中，因此"栈必须为stack<int>"!!! tokens的数字字符串必须"转为int"!!!! 运算的结果必须是 "(int)a op (int)b"，如果 (float)a/(float)b 会导致结果错误!!!
"缺陷"：为了高内聚，强行使用了map，结果反而增加了代码运行时间，尝试直接用递归！！！
class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        if(tokens.size() == 0){
            return INT_MIN;
        }
        stack<int> number;//PS:如果用stack<float>，即使每次往stack中push的是整数也会出现错误！！！！
        init_operator();
        for(int i=0;i<tokens.size();i++){
            if(oper.find(tokens[i]) != oper.end()){
                int a = number.top();//PS：对于每一次的计算都需要强转为(int!!!)
                number.pop();
                int b = number.top();
                number.pop();
                // "14","5","/" ==> 14/5
                number.push(cal(b,a,oper[tokens[i]]));
            }
            else{
                number.push(atoi(tokens[i].c_str()));
            }
        }
        return number.top();
    }

private:
    map<string,int> oper;
    void init_operator(){
        oper["+"] = 0;
        oper["-"] = 1;
        oper["*"] = 2;
        oper["/"] = 3;
    }

    int cal(int a,int b,int op){
        switch(op){
            case 0:
                return a+b;
            case 1:
                return a-b;
            case 2:
                return a*b;
            case 3:
                if(b==0){
                    return INT_MIN;
                }
                return a/b;//PS：如果自作聪明地使用了(float)a/(float)b也会导致结果错误!!!
            default:
                return INT_MIN;
        }
    }

};

1. pop string from the end of the vector
2. if it's number, just return it
3. if it's operation, call function recursively for 2nd operand and 1st

递归代码：
    既然可以用栈实现，而且参数tokens为引用，自然可以结合递归和vector的pop_back实现啦
    evalRPN(tokens)递归思想：首先用s记录tokens的back()，并且pop_back，如果s为"+,-,*,/"，则递归计算s后面紧随的两个字符串代表的值a,b(即执行两次 evalRPN(tokens))，然后返回 b s a；如果s为数字则直接返回该数字
class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        string s = tokens.back();
        tokens.pop_back();
        if(s=="+" || s=="-" || s=="*" || s=="/"){
            int a = evalRPN(tokens);
            int b = evalRPN(tokens);
            if(s=="+"){
                return b+a;
            }
            if(s=="-"){
                return b-a;
            }
            if(s=="*"){
                return b*a;
            }
            if(s=="/"){
                if(a==0){
                    return INT_MIN;
                }
                return b/a;//PS：如果自作聪明地使用了(float)a/(float)b也会导致结果错误!!!                
            }
            return INT_MIN;
        }
        else{
            return atoi(s.c_str());//c++11 后可以直接用 return stoi(s)
        }
    }
};